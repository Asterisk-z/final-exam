# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  build_webapp_docker_image:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build WebApp Docker image
          command: |
            export TAGNAME=0.2.<< pipeline.number >>
            export IMAGE_NAME=$CIRCLE_PROJECT_REPONAME            
            echo $(pwd)
            cd webapp
            echo $(pwd)
            ls
            echo $DOCKERHUB_USERNAME
            echo $IMAGE_NAME
            docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME:$TAGNAME .
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$TAGNAME
  
  create_infrastructure:
    docker:
      - image: zenika/terraform-aws-cli:release-6.0_terraform-0.15.5_awscli-1.27.60
    steps:
      - checkout
      - run:
          name: Create infrastructure for webapp and sockshop
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd iac/
            terraform init
            terraform plan
            terraform apply --auto-approve

  deploy_applications:
    docker:
      - image: zenika/terraform-aws-cli:release-6.0_terraform-0.15.5_awscli-1.27.60
    steps:
      - checkout
      - run:
          shell: /bin/bash
          name: Deploy webapp and socksshop applications to infrastructure
          command: |
            export CLUSTER_NAME=${CLUSTER_NAME}
            export TAGNAME=0.2.<< pipeline.number >>
            export DOCKER_IMAGE="docker-image=${DOCKERHUB_USERNAME}/${CIRCLE_PROJECT_REPONAME}:$TAGNAME"
            export MYSQL_PASSWORD="mysql-password=${MYSQL_PASSWORD}"
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd iac/deploy/
            terraform init
            terraform plan -var $DOCKER_IMAGE -var $MYSQL_PASSWORD -out=plan.txt
            terraform apply plan.txt
            exit 0
      - run:
          name: Rerun deployment because it usually fails the first 
          command: |
            export CLUSTER_NAME="eks-cluster"
            export TAGNAME=0.2.<< pipeline.number >>
            export DOCKER_IMAGE="docker-image=${DOCKERHUB_USERNAME}/${CIRCLE_PROJECT_REPONAME}:$TAGNAME"
            export MYSQL_PASSWORD="mysql-password=${MYSQL_PASSWORD}"
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd iac/deploy/
            terraform init
            terraform plan -var $DOCKER_IMAGE -var $MYSQL_PASSWORD -out=plan.txt
            terraform apply plan.txt
  
  add_monitoring:
    docker:
      - image: zenika/terraform-aws-cli:release-6.0_terraform-0.15.5_awscli-1.27.60
    steps:
      - checkout
      - run:
          name: Deploy prometheus and grafana
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd iac/monitoring/
            terraform init
            terraform plan
            terraform apply --auto-approve
            exit 0
      - run:
          name: Rerun the deployment of prometheus and grafana if it fails
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd iac/monitoring/
            terraform init
            terraform plan
            terraform apply --auto-approve

  destroy_everything:
    docker:
      - image: zenika/terraform-aws-cli:release-6.0_terraform-0.15.5_awscli-1.27.60
    steps:
      - checkout
      - run:
          name: Destroy Monitoring
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd iac/monitoring/
            terraform init
            terraform destroy --auto-approve
      - run:
          name: Destroy the application deployment
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd iac/deploy/
            terraform init
            terraform destroy --auto-approve
      - run:
          name: Destroy the infrastructure on AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd iac/
            terraform init
            terraform destroy --auto-approve

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  deployment-workflow:
    jobs:
      - destroy_everything
